// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean        @default(false)
    cart          CartItem[]
    wishlist      WishlistItem[]
    accounts      Account[]
    sessions      Session[]
    address       Address[]
    orders        Order[]
    createdAt     DateTime?      @default(now())
    updatedAt     DateTime?      @updatedAt

    couponsIds String[] @db.ObjectId
    coupons    Coupon[] @relation(fields: [couponsIds], references: [id])
}

model Order {
    id              String @id @default(auto()) @map("_id") @db.ObjectId
    customerId      String
    paymentIntentId String

    paymentMethod String

    User     User   @relation(fields: [userId], references: [id])
    userId   String @db.ObjectId
    address  Json
    products Json[]

    subTotal       Float
    total          Float
    paymentStatus  paymentStatus  @default(pending)
    deliveryStatus deliveryStatus @default(placed)

    trackingId   String
    trackingLink String
    couponCode   String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

enum deliveryStatus {
    delivered
    shipped
    processing
    placed
    cancelled
}

enum paymentStatus {
    completed
    pending
    cancelled
    failed
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    id         String   @id @default(auto()) @map("_id") @db.ObjectId

    @@unique([identifier, token])
}

type Image {
    cloudinaryId String
    url          String
}

type Size {
    title    String
    quantity Int
}

enum Gender {
    Male
    Female
    Unisex
}

model Address {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    userId   String @db.ObjectId
    user     User   @relation(fields: [userId], references: [id])
    name     String
    email    String
    mobile   Int
    address1 String
    address2 String
    city     String
    state    String
    pincode  Int
}

enum CouponType {
    percentage
    fixed
}

model Coupon {
    id                 String     @id @default(auto()) @map("_id") @db.ObjectId
    code               String
    type               CouponType @default(fixed)
    oneTime            Boolean    @default(true)
    discount           Int        @default(0)
    minimumOrderAmount Int
    expiry             DateTime   @default(now())
    usageLimit         Int        @default(1)
    usageCount         Int        @default(0)
    userIds            String[]   @db.ObjectId
    users              User[]     @relation(fields: [userIds], references: [id])
}

model CartItem {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String   @db.ObjectId
    product   Product  @relation(fields: [productId], references: [id])
    quantity  Int
    size      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
}

model WishlistItem {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String   @db.ObjectId
    product   Product  @relation(fields: [productId], references: [id])
    User      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, productId])
}

model Category {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String  @unique
    description String?
    image       Image

    subCategories SubCategory[]

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Collection {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String  @unique
    description String?
    image       Image

    productIds String[]  @db.ObjectId
    products   Product[] @relation(fields: [productIds], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SubCategory {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String  @unique
    description String?
    image       Image

    sizeOptions String[]

    categoryId String   @db.ObjectId
    category   Category @relation(fields: [categoryId], references: [id])

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    images        Image[]
    name          String
    brand         String
    description   String
    slug          String  @unique
    originalPrice Int //Mrp
    price         Int //Price listed diff can be used to calculate the discount
    rating        Int     @default(0)
    isInStock     Boolean @default(false)
    inStock       Int     @default(0)
    gender        Gender  @default(Unisex)
    sizes         Size[]

    collectionIds String[]     @db.ObjectId
    collections   Collection[] @relation(fields: [collectionIds], references: [id])

    categoryId String   @db.ObjectId
    category   Category @relation(fields: [categoryId], references: [id])

    subCategoryId String      @db.ObjectId
    subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

    CartItem     CartItem[]
    WishlistItem WishlistItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
